// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database_interfaces

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
  id, title, content, author, published
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, description, content, author, published, created_at, modified_at
`

type CreateArticleParams struct {
	ID        string
	Title     string
	Content   string
	Author    string
	Published bool
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, createArticle,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Author,
		arg.Published,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.Author,
		&i.Published,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles
WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, title, description, content, author, published, created_at, modified_at FROM articles
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, id string) (Article, error) {
	row := q.db.QueryRow(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.Author,
		&i.Published,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, title, description, content, author, published, created_at, modified_at FROM articles
ORDER BY created_at
`

func (q *Queries) ListArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.Author,
			&i.Published,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :exec
UPDATE articles
SET modified_at = $1
WHERE id = $2
RETURNING id, title, description, content, author, published, created_at, modified_at
`

type UpdateArticleParams struct {
	ModifiedAt pgtype.Timestamp
	ID         string
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) error {
	_, err := q.db.Exec(ctx, updateArticle, arg.ModifiedAt, arg.ID)
	return err
}
